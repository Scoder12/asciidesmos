// RSDesmos Pest Grammar
// Edit this grammar in the https://pest.rs IDE

Program = { SOI ~ Stmt ~ EOF }

ExpressionNoList =  { UnaryExpression | BinaryExpression | Piecewise | Term }
Expression = { List | UnaryExpression | BinaryExpression | Piecewise | Term }
MapExpression = { "@(" ~ Expression ~ ")" }
Term = { Call | Variable | Number | MapExpression | "(" ~ Expression ~ ")" }

Factorial = @{ "!" }
UnaryOperator = { Factorial }
UnaryExpression = { Term ~ UnaryOperator }

Add =      @{ "+" }
Subtract = @{ "-" }
Multiply = @{ "*" }
Divide =   @{ "/" }
Mod =      @{ "%" }
BinaryOperator = { Add | Subtract | Multiply | Divide | Mod }
BinPair = { BinaryOperator ~ Term }
BinaryExpression = { Term ~ BinPair+ }

Equals =    @{ "=" }
Less =      @{ "<" }
Greater =   @{ ">" }
LessEq =    @{ "<=" }
GreaterEq = @{ ">=" }
CompareOp = { Equals | LessEq | GreaterEq | Less | Greater }

Piecewise = { "{" ~ PiecewiseContents ~ "}" }
PiecewiseContents = { PiecewiseBranch ~ "," ~ PiecewiseBranches  ~ OtherwiseBranch }
// Same as Arguments
PiecewiseBranches = { (PiecewiseBranch ~ ",")* }
PiecewiseBranch = { Condition ~ ":" ~ Expression }
Condition = { Expression ~ CompareOp ~ Expression }
// Inspired by haskell
OtherwiseBranch = { ( "otherwise" | "_" ) ~ ":" ~ Expression }

PositiveSign = @{ "+" }
NegativeSign = @{ "-" }
NumberSign = @{ PositiveSign | NegativeSign }

DecimalPoint = @{ "." }
Number = @{ NumberSign? ~ ASCII_DIGIT+ ~ (DecimalPoint ~ ASCII_DIGIT+)? }

Letter = { 'a'..'z' | 'A'..'Z' }
Identifier = @{ Letter ~ (Letter | ASCII_DIGIT)* }

Variable = @{ Identifier }

// Trailing commas ("a(1,)") won't parse
Arguments = { Expression ~ ("," ~ Expression)* }
ArgumentsNoList = { ExpressionNoList ~ ("," ~ ExpressionNoList)*  }

// Nested lists are not allowed
List = { "[" ~ ArgumentsNoList? ~ "]" }

MapCall =    @{ "@(" }
NormalCall = @{ "(" }
CallStart = ${ Identifier ~ ( MapCall | NormalCall ) }
Call = { CallStart ~ Arguments? ~ ")" }

Type = { "Number" | "List" }
TypeAnnotation = { ":" ~ Type }

FuncDefParam = { Identifier ~ TypeAnnotation? }
FuncDefParams = { FuncDefParam ~ ("," ~ FuncDefParam)* }

FuncDef = { Identifier ~ "(" ~ FuncDefParams? ~ ")" ~ TypeAnnotation? }
FuncDefStmt = { FuncDef ~ "=" ~ Expression }

Stmt = { FuncDefStmt | Expression }

WHITESPACE = _{ " " | "\t" }

EOF = _{ EOI | ";" }
